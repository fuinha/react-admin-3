{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { cloneElement, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { useReferenceManyFieldController, ListContext } from 'ra-core';\nimport { fieldPropTypes } from './types';\nimport sanitizeRestProps from './sanitizeRestProps';\n/**\n * Render related records to the current one.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example Display all the books by the current author, only the title\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, restricts the displayed values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceManyField perPage={10} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceManyField filter={{ is_published: true }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n */\n\nexport var ReferenceManyField = function (props) {\n  var basePath = props.basePath,\n      children = props.children,\n      filter = props.filter,\n      _a = props.page,\n      page = _a === void 0 ? 1 : _a,\n      perPage = props.perPage,\n      record = props.record,\n      reference = props.reference,\n      resource = props.resource,\n      sort = props.sort,\n      source = props.source,\n      target = props.target;\n\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceManyField> only accepts a single child (like <Datagrid>)');\n  }\n\n  var controllerProps = useReferenceManyFieldController({\n    basePath: basePath,\n    filter: filter,\n    page: page,\n    perPage: perPage,\n    record: record,\n    reference: reference,\n    resource: resource,\n    sort: sort,\n    source: source,\n    target: target\n  });\n  return React.createElement(ListContext.Provider, {\n    value: controllerProps\n  }, React.createElement(ReferenceManyFieldView, __assign({}, props, controllerProps)));\n};\nReferenceManyField.propTypes = {\n  addLabel: PropTypes.bool,\n  basePath: PropTypes.string,\n  children: PropTypes.element.isRequired,\n  className: PropTypes.string,\n  filter: PropTypes.object,\n  label: PropTypes.string,\n  perPage: PropTypes.number,\n  record: PropTypes.any,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  sortByOrder: fieldPropTypes.sortByOrder,\n  source: PropTypes.string.isRequired,\n  sort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  target: PropTypes.string.isRequired\n};\nReferenceManyField.defaultProps = {\n  filter: {},\n  perPage: 25,\n  sort: {\n    field: 'id',\n    order: 'DESC'\n  },\n  source: 'id',\n  addLabel: true\n};\nexport var ReferenceManyFieldView = function (props) {\n  var basePath = props.basePath,\n      children = props.children,\n      pagination = props.pagination,\n      reference = props.reference,\n      rest = __rest(props, [\"basePath\", \"children\", \"pagination\", \"reference\"]);\n\n  return React.createElement(React.Fragment, null, cloneElement(Children.only(children), __assign(__assign({}, sanitizeRestProps(rest)), {\n    basePath: basePath,\n    resource: reference\n  })), pagination && props.total !== undefined && cloneElement(pagination, rest));\n};\nReferenceManyFieldView.propTypes = {\n  basePath: PropTypes.string,\n  children: PropTypes.element,\n  className: PropTypes.string,\n  currentSort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  data: PropTypes.any,\n  ids: PropTypes.array,\n  loaded: PropTypes.bool,\n  pagination: PropTypes.element,\n  reference: PropTypes.string,\n  setSort: PropTypes.func\n};\nexport default ReferenceManyField;","map":{"version":3,"sources":["/Users/nalh/Desktop/admin-page/node_modules/ra-ui-materialui/esm/field/ReferenceManyField.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","cloneElement","Children","PropTypes","useReferenceManyFieldController","ListContext","fieldPropTypes","sanitizeRestProps","ReferenceManyField","props","basePath","children","filter","_a","page","perPage","record","reference","resource","sort","source","target","count","Error","controllerProps","createElement","Provider","value","ReferenceManyFieldView","propTypes","addLabel","bool","string","element","isRequired","className","object","label","number","any","sortBy","sortByOrder","exact","field","order","defaultProps","pagination","rest","Fragment","only","total","undefined","currentSort","data","ids","array","loaded","setSort","func"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { cloneElement, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { useReferenceManyFieldController, ListContext, } from 'ra-core';\nimport { fieldPropTypes } from './types';\nimport sanitizeRestProps from './sanitizeRestProps';\n/**\n * Render related records to the current one.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example Display all the books by the current author, only the title\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, restricts the displayed values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceManyField perPage={10} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceManyField filter={{ is_published: true }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n */\nexport var ReferenceManyField = function (props) {\n    var basePath = props.basePath, children = props.children, filter = props.filter, _a = props.page, page = _a === void 0 ? 1 : _a, perPage = props.perPage, record = props.record, reference = props.reference, resource = props.resource, sort = props.sort, source = props.source, target = props.target;\n    if (React.Children.count(children) !== 1) {\n        throw new Error('<ReferenceManyField> only accepts a single child (like <Datagrid>)');\n    }\n    var controllerProps = useReferenceManyFieldController({\n        basePath: basePath,\n        filter: filter,\n        page: page,\n        perPage: perPage,\n        record: record,\n        reference: reference,\n        resource: resource,\n        sort: sort,\n        source: source,\n        target: target,\n    });\n    return (React.createElement(ListContext.Provider, { value: controllerProps },\n        React.createElement(ReferenceManyFieldView, __assign({}, props, controllerProps))));\n};\nReferenceManyField.propTypes = {\n    addLabel: PropTypes.bool,\n    basePath: PropTypes.string,\n    children: PropTypes.element.isRequired,\n    className: PropTypes.string,\n    filter: PropTypes.object,\n    label: PropTypes.string,\n    perPage: PropTypes.number,\n    record: PropTypes.any,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sortBy: PropTypes.string,\n    sortByOrder: fieldPropTypes.sortByOrder,\n    source: PropTypes.string.isRequired,\n    sort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    target: PropTypes.string.isRequired,\n};\nReferenceManyField.defaultProps = {\n    filter: {},\n    perPage: 25,\n    sort: { field: 'id', order: 'DESC' },\n    source: 'id',\n    addLabel: true,\n};\nexport var ReferenceManyFieldView = function (props) {\n    var basePath = props.basePath, children = props.children, pagination = props.pagination, reference = props.reference, rest = __rest(props, [\"basePath\", \"children\", \"pagination\", \"reference\"]);\n    return (React.createElement(React.Fragment, null,\n        cloneElement(Children.only(children), __assign(__assign({}, sanitizeRestProps(rest)), { basePath: basePath, resource: reference })),\n        pagination &&\n            props.total !== undefined &&\n            cloneElement(pagination, rest)));\n};\nReferenceManyFieldView.propTypes = {\n    basePath: PropTypes.string,\n    children: PropTypes.element,\n    className: PropTypes.string,\n    currentSort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    data: PropTypes.any,\n    ids: PropTypes.array,\n    loaded: PropTypes.bool,\n    pagination: PropTypes.element,\n    reference: PropTypes.string,\n    setSort: PropTypes.func,\n};\nexport default ReferenceManyField;\n"]},"metadata":{},"sourceType":"module"}